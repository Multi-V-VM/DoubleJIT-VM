@misc{rv8,
  author = {Michael Clark},
  title  = {rv8: RiscV JIT emulator},
  year   = {2020},
  url    = {https://michaeljclark.github.io/}
}
@misc{musl-sysv-compare,
  author = {Tom Zhao},
  title  = {The comparison of GlibC between MUSL and SYSV},
  year   = {2020},
  url    = {https://blog.tomzhao.me/wp-content/uploads/2021/08/glibcmusl-system-call.pdf}
}

@misc{wasitime,
  author = {Red Hat},
  title  = {WasiTime JIT Optimization tools for WASM},
  year   = {2022},
  url    = {https://crates.io/crates/wasmtime-jit}
}

@misc{wasi-sdk,
 author = {Red Hat},
 title  = {LibC implementation inside WASI},
 year   = {2022},
 url    = {https://github.com/WebAssembly/wasi-libc}
}

@misc{nasa,
 author = {Sifive},
 title  = {NASA Makes RISC-V the Go-to Ecosystem for Future Space Missions},
 year   = {2022},
 url    = {https://www.sifive.com/press/nasa-selects-sifive-and-makes-risc-v-the-go-to-ecosystem}
}

@misc{wasm-spec,
 author = {Sifive},
 title  = {WebAssembly Specification},
 year   = {2022},
 url    = {https://webassembly.github.io/spec/core/_download/WebAssembly.pdf}
}

@misc{alibaba,
 author = {Alibaba},
 title  = {World's First Laptop with RISC-V Processor Now Available},
 year   = {2022},
 url    = {https://www.tomshardware.com/news/risc-v-laptop-world-first}
}

@misc{alibaba1,
 author = {Alibaba},
 title  = {Alibaba Cloud Unveils Chip Development Platform to Support Developers with RISC-V based High-performance SoCs},
 year   = {2022},
 url    = {https://www.alibabacloud.com/blog/alibaba-cloud-unveils-chip-development-platform-to-support-developers-with-risc-v-based-high-performance-socs_599265}
}

@misc{wasm3,
 author = {Volodymyr Shymanskyy},
 title  = {The fastest WebAssembly interpreter, and the most universal runtime},
 year   = {2022},
 url    = {https://github.com/wasm3/wasm3}
}

@misc{windows2000,
 author = {Fabrice Bellard},
 title  = {Windows2000 on Virutal Machine},
 year   = {2018},
 url    = {https://bellard.org/jslinux/vm.html?url=https://bellard.org/jslinux/win2k.cfg&mem=192&graphic=1&w=1024&h=768}
}

@misc{bilibili,
 author = {Bilibili},
 title  = {Start the HEVC inside the Bilibili player},
 year   = {2022},
 url    = {https://zhuanlan-zhihu-com.translate.goog/p/514735090?_x_tr_sl=auto&_x_tr_tl=en&_x_tr_hl=en&_x_tr_pto=wapp}
}

@misc{kwasm,
 author = {K framework Author},
 title  = {K framework Proof of WebAssembly},
 year   = {2018},
 url    = {https://github.com/wasm3/wasm3}
}

@misc{ssra,
 author = {K framework Author},
 title  = {K framework Proof of WebAssembly},
 year   = {2022},
 url    = {https://github.com/mkeeter/ssra}
}

@misc{wasm-simd,
 author = {K framework Author},
 title  = {K framework Proof of WebAssembly},
 year   = {2022},
 url    = {https://github.com/WebAssembly/simd/blob/main/proposals/simd/SIMD.md}
}

@inproceedings{occlum,
author = {Shen, Youren and Tian, Hongliang and Chen, Yu and Chen, Kang and Wang, Runji and Xu, Yi and Xia, Yubin and Yan, Shoumeng},
title = {Occlum: Secure and Efficient Multitasking Inside a Single Enclave of Intel SGX},
year = {2020},
isbn = {9781450371025},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3373376.3378469},
doi = {10.1145/3373376.3378469},
abstract = {Intel Software Guard Extensions (SGX) enables user-level code to create private memory regions called enclaves, whose code and data are protected by the CPU from software and hardware attacks outside the enclaves. Recent work introduces library operating systems (LibOSes) to SGX so that legacy applications can run inside enclaves with few or even no modifications. As virtually any non-trivial application demands multiple processes, it is essential for LibOSes to support multitasking. However, none of the existing SGX LibOSes support multitasking both securely and efficiently.This paper presents Occlum, a system that enables secure and efficient multitasking on SGX. We implement the LibOS processes as SFI-Isolated Processes (SIPs). SFI is a software instrumentation technique for sandboxing untrusted modules (called domains). We design a novel SFI scheme named MPX-based, Multi-Domain SFI (MMDSFI) and leverage MMDSFI to enforce the isolation of SIPs. We also design an independent verifier to ensure the security guarantees of MMDSFI. With SIPs safely sharing the single address space of an enclave, the LibOS can implement multitasking efficiently. The Occlum LibOS outperforms the state-of-the-art SGX LibOS on multitasking-heavy workloads by up to 6,600x on micro-benchmarks and up to 500x on application benchmarks.},
booktitle = {Proceedings of the Twenty-Fifth International Conference on Architectural Support for Programming Languages and Operating Systems},
pages = {955â€“970},
numpages = {16},
keywords = {intel mpx, software fault isolation, intel sgx, multitasking, library os},
location = {Lausanne, Switzerland},
series = {ASPLOS '20}
}

@misc{senpai,
 author = {victoryang00},
 title  = {A game called Senpai written in C++ compiled to WASM},
 year   = {2022},
 url    = {https://github.com/victoryang00/Ryan-teaching-winter-session}
}

