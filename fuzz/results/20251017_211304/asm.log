   Compiling libfuzzer-sys v0.4.10
warning: unexpected `cfg` condition name: `documenting`
 --> /root/DoubleJIT-VM/src/lib.rs:2:13
  |
2 | #![cfg_attr(documenting, feature(doc_cfg))]
  |             ^^^^^^^^^^^
  |
  = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(documenting)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(documenting)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `std`
 --> /root/DoubleJIT-VM/src/lib.rs:6:17
  |
6 | #[cfg(any(test, feature = "std"))]
  |                 ^^^^^^^^^^^^^^^ help: remove the condition
  |
  = note: no expected values for `feature`
  = help: consider adding `std` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `std`
  --> /root/DoubleJIT-VM/src/frontend/elf.rs:25:11
   |
25 |     #[cfg(feature = "std")]
   |           ^^^^^^^^^^^^^^^ help: remove the condition
   |
   = note: no expected values for `feature`
   = help: consider adding `std` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused macro definition: `vx`
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:1843:14
     |
1843 | macro_rules! vx {
     |              ^^
     |
     = note: `#[warn(unused_macros)]` (part of `#[warn(unused)]`) on by default

warning: unused macro definition: `rvv`
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:1850:14
     |
1850 | macro_rules! rvv {
     |              ^^^

warning: unused import: `WasmPtr`
 --> /root/DoubleJIT-VM/src/middleend/wasm_module.rs:3:5
  |
3 |     WasmPtr,
  |     ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` (part of `#[warn(unused)]`) on by default

warning: unused import: `Xx`
 --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:2:85
  |
2 |     Instruction, Instr, RV32Instr, RV64Instr, RV32I, RV64I, RV32M, RV64M, RVV, Reg, Xx, Rd, Rs1, Rs2
  |                                                                                     ^^

warning: unused imports: `MemoryType`, `Memory`, `Pages`, `Store`, `Type`, `Value`, and `WASM_MAX_PAGES`
 --> /root/DoubleJIT-VM/src/backend/wasm_builder.rs:1:14
  |
1 | use wasmer::{Memory, MemoryType, Pages, Store, Type, Value, WASM_MAX_PAGES};
  |              ^^^^^^  ^^^^^^^^^^  ^^^^^  ^^^^^  ^^^^  ^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `wasmer::Engine`
 --> /root/DoubleJIT-VM/src/backend/wasm_builder.rs:2:5
  |
2 | use wasmer::Engine;
  |     ^^^^^^^^^^^^^^

warning: unused import: `wasmer_compiler_cranelift::Cranelift`
 --> /root/DoubleJIT-VM/src/backend/wasm_builder.rs:3:5
  |
3 | use wasmer_compiler_cranelift::Cranelift;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `bytes`
  --> /root/DoubleJIT-VM/src/frontend/binary.rs:72:17
   |
72 |             let bytes = &bytes[bytes_start..bytes_end];
   |                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_bytes`
   |
   = note: `#[warn(unused_variables)]` (part of `#[warn(unused)]`) on by default

warning: unused variable: `page_range`
  --> /root/DoubleJIT-VM/src/frontend/binary.rs:78:25
   |
78 |                 let mut page_range =
   |                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_page_range`

warning: unused variable: `address_range_len`
  --> /root/DoubleJIT-VM/src/frontend/binary.rs:80:21
   |
80 |                 let address_range_len = address_range.end as usize - address_range.start as usize;
   |                     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_address_range_len`

warning: variable does not need to be mutable
  --> /root/DoubleJIT-VM/src/frontend/binary.rs:78:21
   |
78 |                 let mut page_range =
   |                     ----^^^^^^^^^^
   |                     |
   |                     help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` (part of `#[warn(unused)]`) on by default

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:690:17
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |             |
    |             matches any value
    |
    = note: `#[warn(unreachable_patterns)]` (part of `#[warn(unused)]`) on by default

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:690:50
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             - matches any value                  ^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:691:13
    |
690 |               _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |               -------------------------------------------------------------- matches all the relevant values
691 | /             SectionHeaderType::ProgramBits
692 | |             | SectionHeaderType::SharedLibrary
693 | |             | SectionHeaderType::OsSpecific(_)
694 | |             | SectionHeaderType::ProcessorSpecific(_)
695 | |             | SectionHeaderType::User(_) => SectionData::Undefined(self.raw_data(elf_file)),
    | |________________________________________^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:696:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
696 |             SectionHeaderType::SymbolTable => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:699:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
699 |             SectionHeaderType::DynamicSymbolTable => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:702:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
702 |             SectionHeaderType::StringTable => SectionData::StrArray(self.raw_data(elf_file)),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:703:13
    |
690 |               _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |               -------------------------------------------------------------- matches all the relevant values
...
703 | /             SectionHeaderType::InitializeArray
704 | |             | SectionHeaderType::TerminationArray
705 | |             | SectionHeaderType::PreInitializeArray => {
    | |___________________________________________________^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:708:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
708 |             SectionHeaderType::RelocationAddendTable => array_data!(Rela32, Rela64, Rela128),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:709:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
709 |             SectionHeaderType::RelocationAddendTable => array_data!(Rel32, Rel64, Rel128),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:710:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
710 |             SectionHeaderType::DynamicLinkingTable => array_data!(Dynamic32, Dynamic64, Dynamic128),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:711:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
711 |             SectionHeaderType::Group => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:719:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
719 |             SectionHeaderType::SymTabShIndex => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:722:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
722 |             SectionHeaderType::NOTE => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:739:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
739 |             SectionHeaderType::HashTable => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:825:21
    |
825 |                     _ => unreachable!(),
    |                     ^ no value can reach this
    |
note: multiple earlier patterns match some of the same values
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:825:21
    |
801 |                     0 => Ok(SectionHeaderType::SectionNull),
    |                     - matches some of the same values
802 |                     1 => Ok(SectionHeaderType::ProgramBits),
    |                     - matches some of the same values
803 |                     2 => Ok(SectionHeaderType::SymbolTable),
    |                     - matches some of the same values
804 |                     3 => Ok(SectionHeaderType::StringTable),
    |                     - matches some of the same values
...
825 |                     _ => unreachable!(),
    |                     ^ ...and 14 other patterns collectively make this unreachable

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:854:21
    |
854 |                     _ => unreachable!(),
    |                     ^ no value can reach this
    |
note: multiple earlier patterns match some of the same values
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:854:21
    |
830 |                     0 => Ok(SectionHeaderType::SectionNull),
    |                     - matches some of the same values
831 |                     1 => Ok(SectionHeaderType::ProgramBits),
    |                     - matches some of the same values
832 |                     2 => Ok(SectionHeaderType::SymbolTable),
    |                     - matches some of the same values
833 |                     3 => Ok(SectionHeaderType::StringTable),
    |                     - matches some of the same values
...
854 |                     _ => unreachable!(),
    |                     ^ ...and 14 other patterns collectively make this unreachable

warning: unused variable: `flags`
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:944:34
    |
944 |             SectionData::Group { flags, indicies } => writeln!(f, "SectionData::Group")?,
    |                                  ^^^^^ help: try ignoring the field: `flags: _`

warning: unused variable: `indicies`
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:944:41
    |
944 |             SectionData::Group { flags, indicies } => writeln!(f, "SectionData::Group")?,
    |                                         ^^^^^^^^ help: try ignoring the field: `indicies: _`

warning: unused variable: `f`
   --> /root/DoubleJIT-VM/src/frontend/instruction.rs:882:19
    |
882 |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    |                   ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `f`
   --> /root/DoubleJIT-VM/src/frontend/instruction.rs:887:19
    |
887 |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    |                   ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `f`
   --> /root/DoubleJIT-VM/src/frontend/instruction.rs:892:19
    |
892 |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    |                   ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `uimm`
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:1380:45
     |
1380 |                         (0b00_000_00000_00, uimm) => Some(rv64!(
     |                                             ^^^^
     |
help: if this is intentional, prefix it with an underscore
     |
1380 |                         (0b00_000_00000_00, _uimm) => Some(rv64!(
     |                                             +
help: you might have meant to pattern match on the similarly named constant `FENCE_I`
     |
1380 -                         (0b00_000_00000_00, uimm) => Some(rv64!(
1380 +                         (0b00_000_00000_00, frontend::instruction::Instruction::parse::FENCE_I) => Some(rv64!(
     |

warning: unused variable: `uimm`
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:1390:45
     |
1390 |                         (0b01_000_00000_00, uimm) => Some(rv64!(
     |                                             ^^^^
     |
help: if this is intentional, prefix it with an underscore
     |
1390 |                         (0b01_000_00000_00, _uimm) => Some(rv64!(
     |                                             +
help: you might have meant to pattern match on the similarly named constant `FENCE_I`
     |
1390 -                         (0b01_000_00000_00, uimm) => Some(rv64!(
1390 +                         (0b01_000_00000_00, frontend::instruction::Instruction::parse::FENCE_I) => Some(rv64!(
     |

warning: unreachable pattern
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:2059:25
     |
2059 |                         _ => None,
     |                         ^ no value can reach this
     |
note: multiple earlier patterns match some of the same values
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:2059:25
     |
2037 |                         0b0 => Some(rv32!(RV32I, ECALL)),
     |                         --- matches some of the same values
2038 |                         0b1 => Some(rv32!(RV32I, EBREAK)),
     |                         --- matches some of the same values
2039 |                         _ => match funct7(bit_u32) {
     |                         - matches some of the same values
...
2059 |                         _ => None,
     |                         ^ collectively making this unreachable

warning: unused variable: `state`
   --> /root/DoubleJIT-VM/src/middleend/wasm_module.rs:232:13
    |
232 |         let state = env.data().lock().unwrap();
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `arg4`
   --> /root/DoubleJIT-VM/src/middleend/wasm_module.rs:228:9
    |
228 |         arg4: i64,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_arg4`

warning: unused variable: `arg5`
   --> /root/DoubleJIT-VM/src/middleend/wasm_module.rs:229:9
    |
229 |         arg5: i64,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_arg5`

warning: unused variable: `arg6`
   --> /root/DoubleJIT-VM/src/middleend/wasm_module.rs:230:9
    |
230 |         arg6: i64,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_arg6`

warning: variable does not need to be mutable
   --> /root/DoubleJIT-VM/src/middleend/wasm_module.rs:223:9
    |
223 |         mut env: FunctionEnvMut<Arc<Mutex<RiscVState>>>,
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `rs1`
   --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:799:32
    |
799 |             MULHSU(Rd(rd), Rs1(rs1), Rs2(rs2)) => {
    |                                ^^^ help: if this is intentional, prefix it with an underscore: `_rs1`

warning: unused variable: `rs2`
   --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:799:42
    |
799 |             MULHSU(Rd(rd), Rs1(rs1), Rs2(rs2)) => {
    |                                          ^^^ help: if this is intentional, prefix it with an underscore: `_rs2`

warning: unused variable: `rs1`
   --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:809:31
    |
809 |             MULHU(Rd(rd), Rs1(rs1), Rs2(rs2)) => {
    |                               ^^^ help: if this is intentional, prefix it with an underscore: `_rs1`

warning: unused variable: `rs2`
   --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:809:41
    |
809 |             MULHU(Rd(rd), Rs1(rs1), Rs2(rs2)) => {
    |                                         ^^^ help: if this is intentional, prefix it with an underscore: `_rs2`

warning: field `pages` is never read
  --> /root/DoubleJIT-VM/src/frontend/binary.rs:10:5
   |
 9 | pub struct Binary<'a> {
   |            ------ field in this struct
10 |     pages: Vec<Option<Page<'a>>>,
   |     ^^^^^
   |
   = note: `#[warn(dead_code)]` (part of `#[warn(unused)]`) on by default

warning: function `map_page` is never used
  --> /root/DoubleJIT-VM/src/frontend/binary.rs:81:20
   |
81 |                 fn map_page<'a>(
   |                    ^^^^^^^^

warning: method `get_info` is never used
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:865:8
    |
665 | impl<'a> SectionHeader<'a> {
    | -------------------------- method in this implementation
...
865 |     fn get_info(&self) -> u32 {
    |        ^^^^^^^^

warning: function `c_fsdsp_uimmediate` is never used
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:1109:4
     |
1109 | fn c_fsdsp_uimmediate(bit_u32: u32) -> u32 {
     |    ^^^^^^^^^^^^^^^^^^

warning: constant `FENCE_I` is never used
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:2024:27
     |
2024 |                     const FENCE_I: u32 = 0b0000_0000_0000_00000_001_00000_0001111;
     |                           ^^^^^^^

warning: trait `LinearMemory` is never used
 --> /root/DoubleJIT-VM/src/middleend/address_map.rs:1:11
  |
1 | pub trait LinearMemory {
  |           ^^^^^^^^^^^^

warning: field `label_counter` is never read
  --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:18:5
   |
 7 | pub struct WasmEmitter {
   |            ----------- field in this struct
...
18 |     label_counter: usize,
   |     ^^^^^^^^^^^^^

warning: method `fresh_label` is never used
  --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:55:8
   |
21 | impl WasmEmitter {
   | ---------------- method in this implementation
...
55 |     fn fresh_label(&mut self) -> String {
   |        ^^^^^^^^^^^

warning: unused `Result` in tuple element 1 that must be used
   --> /root/DoubleJIT-VM/src/frontend/binary.rs:138:13
    |
138 |             dbg!(" {},", sh.get_data(&elf));
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` (part of `#[warn(unused)]`) on by default

warning: `doublejit_vm` (lib) generated 56 warnings (run `cargo fix --lib -p doublejit_vm` to apply 9 suggestions)
   Compiling doublejit-vm-fuzz v0.0.1 (/root/DoubleJIT-VM/fuzz)
    Finished `release` profile [optimized + debuginfo] target(s) in 0.84s
    Blocking waiting for file lock on package cache
warning: unexpected `cfg` condition name: `documenting`
 --> /root/DoubleJIT-VM/src/lib.rs:2:13
  |
2 | #![cfg_attr(documenting, feature(doc_cfg))]
  |             ^^^^^^^^^^^
  |
  = help: expected names are: `docsrs`, `feature`, and `test` and 31 more
  = help: consider using a Cargo feature instead
  = help: or consider adding in `Cargo.toml` the `check-cfg` lint config for the lint:
           [lints.rust]
           unexpected_cfgs = { level = "warn", check-cfg = ['cfg(documenting)'] }
  = help: or consider adding `println!("cargo::rustc-check-cfg=cfg(documenting)");` to the top of the `build.rs`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `std`
 --> /root/DoubleJIT-VM/src/lib.rs:6:17
  |
6 | #[cfg(any(test, feature = "std"))]
  |                 ^^^^^^^^^^^^^^^ help: remove the condition
  |
  = note: no expected values for `feature`
  = help: consider adding `std` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `std`
  --> /root/DoubleJIT-VM/src/frontend/elf.rs:25:11
   |
25 |     #[cfg(feature = "std")]
   |           ^^^^^^^^^^^^^^^ help: remove the condition
   |
   = note: no expected values for `feature`
   = help: consider adding `std` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused macro definition: `vx`
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:1843:14
     |
1843 | macro_rules! vx {
     |              ^^
     |
     = note: `#[warn(unused_macros)]` (part of `#[warn(unused)]`) on by default

warning: unused macro definition: `rvv`
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:1850:14
     |
1850 | macro_rules! rvv {
     |              ^^^

warning: unused import: `WasmPtr`
 --> /root/DoubleJIT-VM/src/middleend/wasm_module.rs:3:5
  |
3 |     WasmPtr,
  |     ^^^^^^^
  |
  = note: `#[warn(unused_imports)]` (part of `#[warn(unused)]`) on by default

warning: unused import: `Xx`
 --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:2:85
  |
2 |     Instruction, Instr, RV32Instr, RV64Instr, RV32I, RV64I, RV32M, RV64M, RVV, Reg, Xx, Rd, Rs1, Rs2
  |                                                                                     ^^

warning: unused imports: `MemoryType`, `Memory`, `Pages`, `Store`, `Type`, `Value`, and `WASM_MAX_PAGES`
 --> /root/DoubleJIT-VM/src/backend/wasm_builder.rs:1:14
  |
1 | use wasmer::{Memory, MemoryType, Pages, Store, Type, Value, WASM_MAX_PAGES};
  |              ^^^^^^  ^^^^^^^^^^  ^^^^^  ^^^^^  ^^^^  ^^^^^  ^^^^^^^^^^^^^^

warning: unused import: `wasmer::Engine`
 --> /root/DoubleJIT-VM/src/backend/wasm_builder.rs:2:5
  |
2 | use wasmer::Engine;
  |     ^^^^^^^^^^^^^^

warning: unused import: `wasmer_compiler_cranelift::Cranelift`
 --> /root/DoubleJIT-VM/src/backend/wasm_builder.rs:3:5
  |
3 | use wasmer_compiler_cranelift::Cranelift;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `bytes`
  --> /root/DoubleJIT-VM/src/frontend/binary.rs:72:17
   |
72 |             let bytes = &bytes[bytes_start..bytes_end];
   |                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_bytes`
   |
   = note: `#[warn(unused_variables)]` (part of `#[warn(unused)]`) on by default

warning: unused variable: `page_range`
  --> /root/DoubleJIT-VM/src/frontend/binary.rs:78:25
   |
78 |                 let mut page_range =
   |                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_page_range`

warning: unused variable: `address_range_len`
  --> /root/DoubleJIT-VM/src/frontend/binary.rs:80:21
   |
80 |                 let address_range_len = address_range.end as usize - address_range.start as usize;
   |                     ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_address_range_len`

warning: variable does not need to be mutable
  --> /root/DoubleJIT-VM/src/frontend/binary.rs:78:21
   |
78 |                 let mut page_range =
   |                     ----^^^^^^^^^^
   |                     |
   |                     help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` (part of `#[warn(unused)]`) on by default

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:690:17
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this
    |             |
    |             matches any value
    |
    = note: `#[warn(unreachable_patterns)]` (part of `#[warn(unused)]`) on by default

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:690:50
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             - matches any value                  ^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:691:13
    |
690 |               _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |               -------------------------------------------------------------- matches all the relevant values
691 | /             SectionHeaderType::ProgramBits
692 | |             | SectionHeaderType::SharedLibrary
693 | |             | SectionHeaderType::OsSpecific(_)
694 | |             | SectionHeaderType::ProcessorSpecific(_)
695 | |             | SectionHeaderType::User(_) => SectionData::Undefined(self.raw_data(elf_file)),
    | |________________________________________^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:696:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
696 |             SectionHeaderType::SymbolTable => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:699:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
699 |             SectionHeaderType::DynamicSymbolTable => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:702:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
702 |             SectionHeaderType::StringTable => SectionData::StrArray(self.raw_data(elf_file)),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:703:13
    |
690 |               _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |               -------------------------------------------------------------- matches all the relevant values
...
703 | /             SectionHeaderType::InitializeArray
704 | |             | SectionHeaderType::TerminationArray
705 | |             | SectionHeaderType::PreInitializeArray => {
    | |___________________________________________________^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:708:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
708 |             SectionHeaderType::RelocationAddendTable => array_data!(Rela32, Rela64, Rela128),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:709:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
709 |             SectionHeaderType::RelocationAddendTable => array_data!(Rel32, Rel64, Rel128),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:710:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
710 |             SectionHeaderType::DynamicLinkingTable => array_data!(Dynamic32, Dynamic64, Dynamic128),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:711:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
711 |             SectionHeaderType::Group => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:719:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
719 |             SectionHeaderType::SymTabShIndex => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:722:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
722 |             SectionHeaderType::NOTE => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:739:13
    |
690 |             _ | SectionHeaderType::SectionNull | SectionHeaderType::NoBits => SectionData::Empty,
    |             -------------------------------------------------------------- matches all the relevant values
...
739 |             SectionHeaderType::HashTable => {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no value can reach this

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:825:21
    |
825 |                     _ => unreachable!(),
    |                     ^ no value can reach this
    |
note: multiple earlier patterns match some of the same values
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:825:21
    |
801 |                     0 => Ok(SectionHeaderType::SectionNull),
    |                     - matches some of the same values
802 |                     1 => Ok(SectionHeaderType::ProgramBits),
    |                     - matches some of the same values
803 |                     2 => Ok(SectionHeaderType::SymbolTable),
    |                     - matches some of the same values
804 |                     3 => Ok(SectionHeaderType::StringTable),
    |                     - matches some of the same values
...
825 |                     _ => unreachable!(),
    |                     ^ ...and 14 other patterns collectively make this unreachable

warning: unreachable pattern
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:854:21
    |
854 |                     _ => unreachable!(),
    |                     ^ no value can reach this
    |
note: multiple earlier patterns match some of the same values
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:854:21
    |
830 |                     0 => Ok(SectionHeaderType::SectionNull),
    |                     - matches some of the same values
831 |                     1 => Ok(SectionHeaderType::ProgramBits),
    |                     - matches some of the same values
832 |                     2 => Ok(SectionHeaderType::SymbolTable),
    |                     - matches some of the same values
833 |                     3 => Ok(SectionHeaderType::StringTable),
    |                     - matches some of the same values
...
854 |                     _ => unreachable!(),
    |                     ^ ...and 14 other patterns collectively make this unreachable

warning: unused variable: `flags`
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:944:34
    |
944 |             SectionData::Group { flags, indicies } => writeln!(f, "SectionData::Group")?,
    |                                  ^^^^^ help: try ignoring the field: `flags: _`

warning: unused variable: `indicies`
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:944:41
    |
944 |             SectionData::Group { flags, indicies } => writeln!(f, "SectionData::Group")?,
    |                                         ^^^^^^^^ help: try ignoring the field: `indicies: _`

warning: unused variable: `f`
   --> /root/DoubleJIT-VM/src/frontend/instruction.rs:882:19
    |
882 |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    |                   ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `f`
   --> /root/DoubleJIT-VM/src/frontend/instruction.rs:887:19
    |
887 |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    |                   ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `f`
   --> /root/DoubleJIT-VM/src/frontend/instruction.rs:892:19
    |
892 |     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
    |                   ^ help: if this is intentional, prefix it with an underscore: `_f`

warning: unused variable: `uimm`
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:1380:45
     |
1380 |                         (0b00_000_00000_00, uimm) => Some(rv64!(
     |                                             ^^^^
     |
help: if this is intentional, prefix it with an underscore
     |
1380 |                         (0b00_000_00000_00, _uimm) => Some(rv64!(
     |                                             +
help: you might have meant to pattern match on the similarly named constant `FENCE_I`
     |
1380 -                         (0b00_000_00000_00, uimm) => Some(rv64!(
1380 +                         (0b00_000_00000_00, frontend::instruction::Instruction::parse::FENCE_I) => Some(rv64!(
     |

warning: unused variable: `uimm`
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:1390:45
     |
1390 |                         (0b01_000_00000_00, uimm) => Some(rv64!(
     |                                             ^^^^
     |
help: if this is intentional, prefix it with an underscore
     |
1390 |                         (0b01_000_00000_00, _uimm) => Some(rv64!(
     |                                             +
help: you might have meant to pattern match on the similarly named constant `FENCE_I`
     |
1390 -                         (0b01_000_00000_00, uimm) => Some(rv64!(
1390 +                         (0b01_000_00000_00, frontend::instruction::Instruction::parse::FENCE_I) => Some(rv64!(
     |

warning: unreachable pattern
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:2059:25
     |
2059 |                         _ => None,
     |                         ^ no value can reach this
     |
note: multiple earlier patterns match some of the same values
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:2059:25
     |
2037 |                         0b0 => Some(rv32!(RV32I, ECALL)),
     |                         --- matches some of the same values
2038 |                         0b1 => Some(rv32!(RV32I, EBREAK)),
     |                         --- matches some of the same values
2039 |                         _ => match funct7(bit_u32) {
     |                         - matches some of the same values
...
2059 |                         _ => None,
     |                         ^ collectively making this unreachable

warning: unused variable: `state`
   --> /root/DoubleJIT-VM/src/middleend/wasm_module.rs:232:13
    |
232 |         let state = env.data().lock().unwrap();
    |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `arg4`
   --> /root/DoubleJIT-VM/src/middleend/wasm_module.rs:228:9
    |
228 |         arg4: i64,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_arg4`

warning: unused variable: `arg5`
   --> /root/DoubleJIT-VM/src/middleend/wasm_module.rs:229:9
    |
229 |         arg5: i64,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_arg5`

warning: unused variable: `arg6`
   --> /root/DoubleJIT-VM/src/middleend/wasm_module.rs:230:9
    |
230 |         arg6: i64,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_arg6`

warning: variable does not need to be mutable
   --> /root/DoubleJIT-VM/src/middleend/wasm_module.rs:223:9
    |
223 |         mut env: FunctionEnvMut<Arc<Mutex<RiscVState>>>,
    |         ----^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `rs1`
   --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:799:32
    |
799 |             MULHSU(Rd(rd), Rs1(rs1), Rs2(rs2)) => {
    |                                ^^^ help: if this is intentional, prefix it with an underscore: `_rs1`

warning: unused variable: `rs2`
   --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:799:42
    |
799 |             MULHSU(Rd(rd), Rs1(rs1), Rs2(rs2)) => {
    |                                          ^^^ help: if this is intentional, prefix it with an underscore: `_rs2`

warning: unused variable: `rs1`
   --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:809:31
    |
809 |             MULHU(Rd(rd), Rs1(rs1), Rs2(rs2)) => {
    |                               ^^^ help: if this is intentional, prefix it with an underscore: `_rs1`

warning: unused variable: `rs2`
   --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:809:41
    |
809 |             MULHU(Rd(rd), Rs1(rs1), Rs2(rs2)) => {
    |                                         ^^^ help: if this is intentional, prefix it with an underscore: `_rs2`

warning: field `pages` is never read
  --> /root/DoubleJIT-VM/src/frontend/binary.rs:10:5
   |
 9 | pub struct Binary<'a> {
   |            ------ field in this struct
10 |     pages: Vec<Option<Page<'a>>>,
   |     ^^^^^
   |
   = note: `#[warn(dead_code)]` (part of `#[warn(unused)]`) on by default

warning: function `map_page` is never used
  --> /root/DoubleJIT-VM/src/frontend/binary.rs:81:20
   |
81 |                 fn map_page<'a>(
   |                    ^^^^^^^^

warning: method `get_info` is never used
   --> /root/DoubleJIT-VM/src/frontend/elf.rs:865:8
    |
665 | impl<'a> SectionHeader<'a> {
    | -------------------------- method in this implementation
...
865 |     fn get_info(&self) -> u32 {
    |        ^^^^^^^^

warning: function `c_fsdsp_uimmediate` is never used
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:1109:4
     |
1109 | fn c_fsdsp_uimmediate(bit_u32: u32) -> u32 {
     |    ^^^^^^^^^^^^^^^^^^

warning: constant `FENCE_I` is never used
    --> /root/DoubleJIT-VM/src/frontend/instruction.rs:2024:27
     |
2024 |                     const FENCE_I: u32 = 0b0000_0000_0000_00000_001_00000_0001111;
     |                           ^^^^^^^

warning: trait `LinearMemory` is never used
 --> /root/DoubleJIT-VM/src/middleend/address_map.rs:1:11
  |
1 | pub trait LinearMemory {
  |           ^^^^^^^^^^^^

warning: field `label_counter` is never read
  --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:18:5
   |
 7 | pub struct WasmEmitter {
   |            ----------- field in this struct
...
18 |     label_counter: usize,
   |     ^^^^^^^^^^^^^

warning: method `fresh_label` is never used
  --> /root/DoubleJIT-VM/src/middleend/emit_wasm.rs:55:8
   |
21 | impl WasmEmitter {
   | ---------------- method in this implementation
...
55 |     fn fresh_label(&mut self) -> String {
   |        ^^^^^^^^^^^

warning: unused `Result` in tuple element 1 that must be used
   --> /root/DoubleJIT-VM/src/frontend/binary.rs:138:13
    |
138 |             dbg!(" {},", sh.get_data(&elf));
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` (part of `#[warn(unused)]`) on by default

warning: `doublejit_vm` (lib) generated 56 warnings (run `cargo fix --lib -p doublejit_vm` to apply 9 suggestions)
    Finished `release` profile [optimized + debuginfo] target(s) in 0.09s
     Running `fuzz/target/x86_64-unknown-linux-gnu/release/asm -artifact_prefix=/root/DoubleJIT-VM/fuzz/artifacts/asm/ -max_total_time=3600 -workers=172 -print_final_stats=1 /root/DoubleJIT-VM/fuzz/corpus/asm`
INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2824921929
INFO: Loaded 1 modules   (1357 inline 8-bit counters): 1357 [0x5b97bc389d60, 0x5b97bc38a2ad), 
INFO: Loaded 1 PC tables (1357 PCs): 1357 [0x5b97bc38a2b0,0x5b97bc38f780), 
INFO:        0 files found in /root/DoubleJIT-VM/fuzz/corpus/asm
INFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes
INFO: A corpus is not provided, starting from an empty corpus
#2	INITED cov: 27 ft: 28 corp: 1/1b exec/s: 0 rss: 55Mb

thread '<unnamed>' (1477605) panicked at /root/DoubleJIT-VM/src/frontend/instruction.rs:2360:14:
called `Option::unwrap()` on a `None` value
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
==1477605== ERROR: libFuzzer: deadly signal
    #0 0x5b97bc2d2901 in __sanitizer_print_stack_trace /rustc/llvm/src/llvm-project/compiler-rt/lib/asan/asan_stack.cpp:87:3
    #1 0x5b97bc33e12c in fuzzer::PrintStackTrace() libfuzzer_sys.b1af0d99ce70f199-cgu.0
    #2 0x5b97bc30bb67 in fuzzer::Fuzzer::CrashCallback() libfuzzer_sys.b1af0d99ce70f199-cgu.0
    #3 0x75403964532f  (/lib/x86_64-linux-gnu/libc.so.6+0x4532f) (BuildId: 274eec488d230825a136fa9c4d85370fed7a0a5e)
    #4 0x75403969eb2b in __pthread_kill_implementation nptl/pthread_kill.c:43:17
    #5 0x75403969eb2b in __pthread_kill_internal nptl/pthread_kill.c:78:10
    #6 0x75403969eb2b in pthread_kill nptl/pthread_kill.c:89:10
    #7 0x75403964527d in raise signal/../sysdeps/posix/raise.c:26:13
    #8 0x7540396288fe in abort stdlib/abort.c:79:7
    #9 0x5b97bc34c199 in std::sys::pal::unix::abort_internal::hce98bbb683dfc7b5 /rustc/c8905eaa66e0c35a33626e974b9ce6955c739b5b/library/std/src/sys/pal/unix/mod.rs:368:14
    #10 0x5b97bc34e4a8 in std::process::abort::he60819bff312b1cc /rustc/c8905eaa66e0c35a33626e974b9ce6955c739b5b/library/std/src/process.rs:2511:5
    #11 0x5b97bc308c54 in libfuzzer_sys::initialize::_$u7b$$u7b$closure$u7d$$u7d$::h6b53eddc5e8ecffe /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libfuzzer-sys-0.4.10/src/lib.rs:94:9
    #12 0x5b97bc34ee5e in _$LT$alloc..boxed..Box$LT$F$C$A$GT$$u20$as$u20$core..ops..function..Fn$LT$Args$GT$$GT$::call::hed0132932d8abf65 /rustc/c8905eaa66e0c35a33626e974b9ce6955c739b5b/library/alloc/src/boxed.rs:1987:9
    #13 0x5b97bc34ee5e in std::panicking::panic_with_hook::ha193b3922981828a /rustc/c8905eaa66e0c35a33626e974b9ce6955c739b5b/library/std/src/panicking.rs:842:13
    #14 0x5b97bc34ec85 in std::panicking::panic_handler::_$u7b$$u7b$closure$u7d$$u7d$::he75eae06089263b2 /rustc/c8905eaa66e0c35a33626e974b9ce6955c739b5b/library/std/src/panicking.rs:700:13
    #15 0x5b97bc34d338 in std::sys::backtrace::__rust_end_short_backtrace::h084209dfe3cbf849 /rustc/c8905eaa66e0c35a33626e974b9ce6955c739b5b/library/std/src/sys/backtrace.rs:174:18
    #16 0x5b97bc33eb2c in __rustc::rust_begin_unwind /rustc/c8905eaa66e0c35a33626e974b9ce6955c739b5b/library/std/src/panicking.rs:698:5
    #17 0x5b97bc37aabf in core::panicking::panic_fmt::h0d47791d04b10c1e /rustc/c8905eaa66e0c35a33626e974b9ce6955c739b5b/library/core/src/panicking.rs:78:14
    #18 0x5b97bc37aa9b in core::panicking::panic::h5afda12f2d28188f /rustc/c8905eaa66e0c35a33626e974b9ce6955c739b5b/library/core/src/panicking.rs:148:5
    #19 0x5b97bc37a2e8 in core::option::unwrap_failed::hbdd6c8c6187466fa /rustc/c8905eaa66e0c35a33626e974b9ce6955c739b5b/library/core/src/option.rs:2169:5
    #20 0x5b97bc3070f4 in unwrap<doublejit_vm::frontend::instruction::Instr> /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/option.rs:1010:21
    #21 0x5b97bc3070f4 in doublejit_vm::frontend::instruction::Instruction::parse::hb9fd52d6264db3f7 /root/DoubleJIT-VM/src/frontend/instruction.rs:2360:14
    #22 0x5b97bc2fb25f in {closure#0} /root/DoubleJIT-VM/fuzz/fuzz_targets/asm.rs:28:13
    #23 0x5b97bc2fb25f in std::panicking::catch_unwind::do_call::h7de5662a6dff248c /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:590:40
    #24 0x5b97bc2fec83 in __rust_try asm.3dba1db86ed6572-cgu.0
    #25 0x5b97bc2f9720 in catch_unwind<(), asm::_::__libfuzzer_sys_run::{closure_env#0}> /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:553:19
    #26 0x5b97bc2f9720 in catch_unwind<asm::_::__libfuzzer_sys_run::{closure_env#0}, ()> /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:359:14
    #27 0x5b97bc2f9720 in asm::_::__libfuzzer_sys_run::ha6552596e75d6d33 /root/DoubleJIT-VM/fuzz/fuzz_targets/asm.rs:27:17
    #28 0x5b97bc2fe541 in rust_fuzzer_test_input /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libfuzzer-sys-0.4.10/src/lib.rs:276:60
    #29 0x5b97bc309605 in {closure#0} /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libfuzzer-sys-0.4.10/src/lib.rs:62:9
    #30 0x5b97bc309605 in std::panicking::catch_unwind::do_call::h49d52db9e0cf8552 /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:590:40
    #31 0x5b97bc30a8b8 in __rust_try libfuzzer_sys.b1af0d99ce70f199-cgu.0
    #32 0x5b97bc30867d in catch_unwind<i32, libfuzzer_sys::test_input_wrap::{closure_env#0}> /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panicking.rs:553:19
    #33 0x5b97bc30867d in catch_unwind<libfuzzer_sys::test_input_wrap::{closure_env#0}, i32> /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/panic.rs:359:14
    #34 0x5b97bc30867d in LLVMFuzzerTestOneInput /root/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/libfuzzer-sys-0.4.10/src/lib.rs:60:22
    #35 0x5b97bc30d134 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) libfuzzer_sys.b1af0d99ce70f199-cgu.0
    #36 0x5b97bc30c829 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) libfuzzer_sys.b1af0d99ce70f199-cgu.0
    #37 0x5b97bc30de45 in fuzzer::Fuzzer::MutateAndTestOne() libfuzzer_sys.b1af0d99ce70f199-cgu.0
    #38 0x5b97bc30e915 in fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) libfuzzer_sys.b1af0d99ce70f199-cgu.0
    #39 0x5b97bc31ed0f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) libfuzzer_sys.b1af0d99ce70f199-cgu.0
    #40 0x5b97bc33e896 in main (/root/DoubleJIT-VM/fuzz/target/x86_64-unknown-linux-gnu/release/asm+0x161896) (BuildId: 3bcd4c027a65015c92b998131a6c354fcc37b4e0)
    #41 0x75403962a1c9 in __libc_start_call_main csu/../sysdeps/nptl/libc_start_call_main.h:58:16
    #42 0x75403962a28a in __libc_start_main csu/../csu/libc-start.c:360:3
    #43 0x5b97bc23e164 in _start /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ub_checks.rs:73:59

NOTE: libFuzzer has rudimentary signal handlers.
      Combine libFuzzer with AddressSanitizer or similar for better crash reports.
SUMMARY: libFuzzer: deadly signal
MS: 1 InsertByte-; base unit: adc83b19e793491b1c6ea0fd8b46cd9f32e592fc
0xa,0x60,
\012`
artifact_prefix='/root/DoubleJIT-VM/fuzz/artifacts/asm/'; Test unit written to /root/DoubleJIT-VM/fuzz/artifacts/asm/crash-3c55652bd2b606a40b69fd3fb31054f61ed4c747
Base64: CmA=
stat::number_of_executed_units: 3
stat::average_exec_per_sec:     0
stat::new_units_added:          0
stat::slowest_unit_time_sec:    0
stat::peak_rss_mb:              55

────────────────────────────────────────────────────────────────────────────────

Failing input:

	fuzz/artifacts/asm/crash-3c55652bd2b606a40b69fd3fb31054f61ed4c747

Output of `std::fmt::Debug`:

	[10, 96]

Reproduce with:

	cargo fuzz run asm fuzz/artifacts/asm/crash-3c55652bd2b606a40b69fd3fb31054f61ed4c747

Minimize test case with:

	cargo fuzz tmin asm fuzz/artifacts/asm/crash-3c55652bd2b606a40b69fd3fb31054f61ed4c747

────────────────────────────────────────────────────────────────────────────────

Error: Fuzz target exited with exit status: 77
